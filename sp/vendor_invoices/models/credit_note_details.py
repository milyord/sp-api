import datetime
from typing import Any, Dict, List, Type, TypeVar, Union

import attr
from dateutil.parser import isoparse

from ..types import UNSET, Unset

T = TypeVar("T", bound="CreditNoteDetails")


@attr.s(auto_attribs=True)
class CreditNoteDetails:
    r"""References required in order to process a credit note. This information is required only if InvoiceType is
    CreditNote.

        Attributes:
            reference_invoice_number (Union[Unset, str]): Original Invoice Number when sending a credit note relating to an
                existing invoice. One Invoice only to be processed per Credit Note. This is mandatory for AP Credit Notes.
            debit_note_number (Union[Unset, str]): Debit Note Number as generated by Amazon. Recommended for Returns and
                COOP Credit Notes.
            returns_reference_number (Union[Unset, str]): Identifies the Returns Notice Number. Mandatory for all Returns
                Credit Notes.
            goods_return_date (Union[Unset, datetime.datetime]): Defines a date and time according to ISO8601.
            rma_id (Union[Unset, str]): Identifies the Returned Merchandise Authorization ID, if generated.
            coop_reference_number (Union[Unset, str]): Identifies the COOP reference used for COOP agreement. Failure to
                provide the COOP reference number or the Debit Note number may lead to a rejection of the Credit Note.
            consignors_reference_number (Union[Unset, str]): Identifies the consignor reference number (VRET number), if
                generated by Amazon.
    """

    reference_invoice_number: Union[Unset, str] = UNSET
    debit_note_number: Union[Unset, str] = UNSET
    returns_reference_number: Union[Unset, str] = UNSET
    goods_return_date: Union[Unset, datetime.datetime] = UNSET
    rma_id: Union[Unset, str] = UNSET
    coop_reference_number: Union[Unset, str] = UNSET
    consignors_reference_number: Union[Unset, str] = UNSET
    additional_properties: Dict[str, Any] = attr.ib(init=False, factory=dict)

    def to_dict(self) -> Dict[str, Any]:
        reference_invoice_number = self.reference_invoice_number
        debit_note_number = self.debit_note_number
        returns_reference_number = self.returns_reference_number
        goods_return_date: Union[Unset, str] = UNSET
        if not isinstance(self.goods_return_date, Unset):
            goods_return_date = self.goods_return_date.isoformat()

        rma_id = self.rma_id
        coop_reference_number = self.coop_reference_number
        consignors_reference_number = self.consignors_reference_number

        field_dict: Dict[str, Any] = {}
        field_dict.update(self.additional_properties)
        field_dict.update({})
        if reference_invoice_number is not UNSET:
            field_dict["referenceInvoiceNumber"] = reference_invoice_number
        if debit_note_number is not UNSET:
            field_dict["debitNoteNumber"] = debit_note_number
        if returns_reference_number is not UNSET:
            field_dict["returnsReferenceNumber"] = returns_reference_number
        if goods_return_date is not UNSET:
            field_dict["goodsReturnDate"] = goods_return_date
        if rma_id is not UNSET:
            field_dict["rmaId"] = rma_id
        if coop_reference_number is not UNSET:
            field_dict["coopReferenceNumber"] = coop_reference_number
        if consignors_reference_number is not UNSET:
            field_dict["consignorsReferenceNumber"] = consignors_reference_number

        return field_dict

    @classmethod
    def from_dict(cls: Type[T], src_dict: Dict[str, Any]) -> T:
        d = src_dict.copy()
        reference_invoice_number = d.pop("referenceInvoiceNumber", UNSET)

        debit_note_number = d.pop("debitNoteNumber", UNSET)

        returns_reference_number = d.pop("returnsReferenceNumber", UNSET)

        _goods_return_date = d.pop("goodsReturnDate", UNSET)
        goods_return_date: Union[Unset, datetime.datetime]
        if isinstance(_goods_return_date, Unset):
            goods_return_date = UNSET
        else:
            goods_return_date = isoparse(_goods_return_date)

        rma_id = d.pop("rmaId", UNSET)

        coop_reference_number = d.pop("coopReferenceNumber", UNSET)

        consignors_reference_number = d.pop("consignorsReferenceNumber", UNSET)

        result = cls(
            reference_invoice_number=reference_invoice_number,
            debit_note_number=debit_note_number,
            returns_reference_number=returns_reference_number,
            goods_return_date=goods_return_date,
            rma_id=rma_id,
            coop_reference_number=coop_reference_number,
            consignors_reference_number=consignors_reference_number,
        )

        result.additional_properties = d
        return result

    @property
    def additional_keys(self) -> List[str]:
        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> Any:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties
