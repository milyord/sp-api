import datetime
from typing import TYPE_CHECKING, Any, Dict, List, Type, TypeVar, Union

import attr
from dateutil.parser import isoparse

from ..models.shipment_confirmation_shipment_confirmation_type import ShipmentConfirmationShipmentConfirmationType
from ..models.shipment_confirmation_shipment_structure import ShipmentConfirmationShipmentStructure
from ..models.shipment_confirmation_shipment_type import ShipmentConfirmationShipmentType
from ..types import UNSET, Unset

if TYPE_CHECKING:
    from ..models.carton import Carton
    from ..models.import_details import ImportDetails
    from ..models.item import Item
    from ..models.pallet import Pallet
    from ..models.party_identification import PartyIdentification
    from ..models.shipment_measurements import ShipmentMeasurements
    from ..models.transportation_details import TransportationDetails


T = TypeVar("T", bound="ShipmentConfirmation")


@attr.s(auto_attribs=True)
class ShipmentConfirmation:
    r"""
    Attributes:
        shipment_identifier (str): Unique shipment ID (not used over the last 365 days).
        shipment_confirmation_type (ShipmentConfirmationShipmentConfirmationType): Indicates if this shipment
            confirmation is the initial confirmation, or intended to replace an already posted shipment confirmation. If
            replacing an existing shipment confirmation, be sure to provide the identical shipmentIdentifier and
            sellingParty information as in the previous confirmation.
        shipment_confirmation_date (datetime.datetime): Date on which the shipment confirmation was submitted.
        selling_party (PartyIdentification):
        ship_from_party (PartyIdentification):
        ship_to_party (PartyIdentification):
        shipped_items (List['Item']): A list of the items in this shipment and their associated details. If any of the
            item detail fields are common at a carton or a pallet level, provide them at the corresponding carton or pallet
            level.
        shipment_type (Union[Unset, ShipmentConfirmationShipmentType]): The type of shipment.
        shipment_structure (Union[Unset, ShipmentConfirmationShipmentStructure]): Shipment hierarchical structure.
        transportation_details (Union[Unset, TransportationDetails]):
        amazon_reference_number (Union[Unset, str]): The Amazon Reference Number is a unique identifier generated by
            Amazon for all Collect/WePay shipments when you submit  a routing request. This field is mandatory for
            Collect/WePay shipments.
        shipped_date (Union[Unset, datetime.datetime]): The date and time of the departure of the shipment from the
            vendor's location. Vendors are requested to send ASNs within 30 minutes of departure from their
            warehouse/distribution center or at least 6 hours prior to the appointment time at the Amazon destination
            warehouse, whichever is sooner. Shipped date mentioned in the shipment confirmation should not be in the future.
        estimated_delivery_date (Union[Unset, datetime.datetime]): The date and time on which the shipment is expected
            to reach buyer's warehouse. It needs to be an estimate based on the average transit time between ship from
            location and the destination. The exact appointment time will be provided by the buyer and is potentially not
            known when creating the shipment confirmation.
        shipment_measurements (Union[Unset, ShipmentMeasurements]): Shipment measurement details.
        import_details (Union[Unset, ImportDetails]):
        cartons (Union[Unset, List['Carton']]): A list of the cartons in this shipment.
        pallets (Union[Unset, List['Pallet']]): A list of the pallets in this shipment.
    """

    shipment_identifier: str
    shipment_confirmation_type: ShipmentConfirmationShipmentConfirmationType
    shipment_confirmation_date: datetime.datetime
    selling_party: "PartyIdentification"
    ship_from_party: "PartyIdentification"
    ship_to_party: "PartyIdentification"
    shipped_items: List["Item"]
    shipment_type: Union[Unset, ShipmentConfirmationShipmentType] = UNSET
    shipment_structure: Union[Unset, ShipmentConfirmationShipmentStructure] = UNSET
    transportation_details: Union[Unset, "TransportationDetails"] = UNSET
    amazon_reference_number: Union[Unset, str] = UNSET
    shipped_date: Union[Unset, datetime.datetime] = UNSET
    estimated_delivery_date: Union[Unset, datetime.datetime] = UNSET
    shipment_measurements: Union[Unset, "ShipmentMeasurements"] = UNSET
    import_details: Union[Unset, "ImportDetails"] = UNSET
    cartons: Union[Unset, List["Carton"]] = UNSET
    pallets: Union[Unset, List["Pallet"]] = UNSET
    additional_properties: Dict[str, Any] = attr.ib(init=False, factory=dict)

    def to_dict(self) -> Dict[str, Any]:
        shipment_identifier = self.shipment_identifier
        shipment_confirmation_type = self.shipment_confirmation_type.value

        shipment_confirmation_date = self.shipment_confirmation_date.isoformat()

        selling_party = self.selling_party.to_dict()

        ship_from_party = self.ship_from_party.to_dict()

        ship_to_party = self.ship_to_party.to_dict()

        shipped_items = []
        for shipped_items_item_data in self.shipped_items:
            shipped_items_item = shipped_items_item_data.to_dict()

            shipped_items.append(shipped_items_item)

        shipment_type: Union[Unset, str] = UNSET
        if not isinstance(self.shipment_type, Unset):
            shipment_type = self.shipment_type.value

        shipment_structure: Union[Unset, str] = UNSET
        if not isinstance(self.shipment_structure, Unset):
            shipment_structure = self.shipment_structure.value

        transportation_details: Union[Unset, Dict[str, Any]] = UNSET
        if not isinstance(self.transportation_details, Unset):
            transportation_details = self.transportation_details.to_dict()

        amazon_reference_number = self.amazon_reference_number
        shipped_date: Union[Unset, str] = UNSET
        if not isinstance(self.shipped_date, Unset):
            shipped_date = self.shipped_date.isoformat()

        estimated_delivery_date: Union[Unset, str] = UNSET
        if not isinstance(self.estimated_delivery_date, Unset):
            estimated_delivery_date = self.estimated_delivery_date.isoformat()

        shipment_measurements: Union[Unset, Dict[str, Any]] = UNSET
        if not isinstance(self.shipment_measurements, Unset):
            shipment_measurements = self.shipment_measurements.to_dict()

        import_details: Union[Unset, Dict[str, Any]] = UNSET
        if not isinstance(self.import_details, Unset):
            import_details = self.import_details.to_dict()

        cartons: Union[Unset, List[Dict[str, Any]]] = UNSET
        if not isinstance(self.cartons, Unset):
            cartons = []
            for cartons_item_data in self.cartons:
                cartons_item = cartons_item_data.to_dict()

                cartons.append(cartons_item)

        pallets: Union[Unset, List[Dict[str, Any]]] = UNSET
        if not isinstance(self.pallets, Unset):
            pallets = []
            for pallets_item_data in self.pallets:
                pallets_item = pallets_item_data.to_dict()

                pallets.append(pallets_item)

        field_dict: Dict[str, Any] = {}
        field_dict.update(self.additional_properties)
        field_dict.update(
            {
                "shipmentIdentifier": shipment_identifier,
                "shipmentConfirmationType": shipment_confirmation_type,
                "shipmentConfirmationDate": shipment_confirmation_date,
                "sellingParty": selling_party,
                "shipFromParty": ship_from_party,
                "shipToParty": ship_to_party,
                "shippedItems": shipped_items,
            }
        )
        if shipment_type is not UNSET:
            field_dict["shipmentType"] = shipment_type
        if shipment_structure is not UNSET:
            field_dict["shipmentStructure"] = shipment_structure
        if transportation_details is not UNSET:
            field_dict["transportationDetails"] = transportation_details
        if amazon_reference_number is not UNSET:
            field_dict["amazonReferenceNumber"] = amazon_reference_number
        if shipped_date is not UNSET:
            field_dict["shippedDate"] = shipped_date
        if estimated_delivery_date is not UNSET:
            field_dict["estimatedDeliveryDate"] = estimated_delivery_date
        if shipment_measurements is not UNSET:
            field_dict["shipmentMeasurements"] = shipment_measurements
        if import_details is not UNSET:
            field_dict["importDetails"] = import_details
        if cartons is not UNSET:
            field_dict["cartons"] = cartons
        if pallets is not UNSET:
            field_dict["pallets"] = pallets

        return field_dict

    @classmethod
    def from_dict(cls: Type[T], src_dict: Dict[str, Any]) -> T:
        from ..models.carton import Carton
        from ..models.import_details import ImportDetails
        from ..models.item import Item
        from ..models.pallet import Pallet
        from ..models.party_identification import PartyIdentification
        from ..models.shipment_measurements import ShipmentMeasurements
        from ..models.transportation_details import TransportationDetails

        d = src_dict.copy()
        shipment_identifier = d.pop("shipmentIdentifier")

        shipment_confirmation_type = ShipmentConfirmationShipmentConfirmationType(d.pop("shipmentConfirmationType"))

        shipment_confirmation_date = isoparse(d.pop("shipmentConfirmationDate"))

        selling_party = PartyIdentification.from_dict(d.pop("sellingParty"))

        ship_from_party = PartyIdentification.from_dict(d.pop("shipFromParty"))

        ship_to_party = PartyIdentification.from_dict(d.pop("shipToParty"))

        shipped_items = []
        _shipped_items = d.pop("shippedItems")
        for shipped_items_item_data in _shipped_items:
            shipped_items_item = Item.from_dict(shipped_items_item_data)

            shipped_items.append(shipped_items_item)

        _shipment_type = d.pop("shipmentType", UNSET)
        shipment_type: Union[Unset, ShipmentConfirmationShipmentType]
        if isinstance(_shipment_type, Unset):
            shipment_type = UNSET
        else:
            shipment_type = ShipmentConfirmationShipmentType(_shipment_type)

        _shipment_structure = d.pop("shipmentStructure", UNSET)
        shipment_structure: Union[Unset, ShipmentConfirmationShipmentStructure]
        if isinstance(_shipment_structure, Unset):
            shipment_structure = UNSET
        else:
            shipment_structure = ShipmentConfirmationShipmentStructure(_shipment_structure)

        _transportation_details = d.pop("transportationDetails", UNSET)
        transportation_details: Union[Unset, TransportationDetails]
        if isinstance(_transportation_details, Unset):
            transportation_details = UNSET
        else:
            transportation_details = TransportationDetails.from_dict(_transportation_details)

        amazon_reference_number = d.pop("amazonReferenceNumber", UNSET)

        _shipped_date = d.pop("shippedDate", UNSET)
        shipped_date: Union[Unset, datetime.datetime]
        if isinstance(_shipped_date, Unset):
            shipped_date = UNSET
        else:
            shipped_date = isoparse(_shipped_date)

        _estimated_delivery_date = d.pop("estimatedDeliveryDate", UNSET)
        estimated_delivery_date: Union[Unset, datetime.datetime]
        if isinstance(_estimated_delivery_date, Unset):
            estimated_delivery_date = UNSET
        else:
            estimated_delivery_date = isoparse(_estimated_delivery_date)

        _shipment_measurements = d.pop("shipmentMeasurements", UNSET)
        shipment_measurements: Union[Unset, ShipmentMeasurements]
        if isinstance(_shipment_measurements, Unset):
            shipment_measurements = UNSET
        else:
            shipment_measurements = ShipmentMeasurements.from_dict(_shipment_measurements)

        _import_details = d.pop("importDetails", UNSET)
        import_details: Union[Unset, ImportDetails]
        if isinstance(_import_details, Unset):
            import_details = UNSET
        else:
            import_details = ImportDetails.from_dict(_import_details)

        cartons = []
        _cartons = d.pop("cartons", UNSET)
        for cartons_item_data in _cartons or []:
            cartons_item = Carton.from_dict(cartons_item_data)

            cartons.append(cartons_item)

        pallets = []
        _pallets = d.pop("pallets", UNSET)
        for pallets_item_data in _pallets or []:
            pallets_item = Pallet.from_dict(pallets_item_data)

            pallets.append(pallets_item)

        result = cls(
            shipment_identifier=shipment_identifier,
            shipment_confirmation_type=shipment_confirmation_type,
            shipment_confirmation_date=shipment_confirmation_date,
            selling_party=selling_party,
            ship_from_party=ship_from_party,
            ship_to_party=ship_to_party,
            shipped_items=shipped_items,
            shipment_type=shipment_type,
            shipment_structure=shipment_structure,
            transportation_details=transportation_details,
            amazon_reference_number=amazon_reference_number,
            shipped_date=shipped_date,
            estimated_delivery_date=estimated_delivery_date,
            shipment_measurements=shipment_measurements,
            import_details=import_details,
            cartons=cartons,
            pallets=pallets,
        )

        result.additional_properties = d
        return result

    @property
    def additional_keys(self) -> List[str]:
        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> Any:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties
