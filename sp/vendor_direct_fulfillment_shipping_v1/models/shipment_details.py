import datetime
from typing import Any, Dict, List, Type, TypeVar, Union

import attr
from dateutil.parser import isoparse

from ..models.shipment_details_shipment_status import ShipmentDetailsShipmentStatus
from ..types import UNSET, Unset

T = TypeVar("T", bound="ShipmentDetails")


@attr.s(auto_attribs=True)
class ShipmentDetails:
    r"""Details about a shipment.

    Attributes:
        shipped_date (datetime.datetime): This field indicates the date of the departure of the shipment from vendor's
            location. Vendors are requested to send ASNs within 30 minutes of departure from their warehouse/distribution
            center or at least 6 hours prior to the appointment time at the Amazon destination warehouse, whichever is
            sooner. Shipped date mentioned in the Shipment Confirmation should not be in the future.
        shipment_status (ShipmentDetailsShipmentStatus): Indicate the shipment status.
        is_priority_shipment (Union[Unset, bool]): Provide the priority of the shipment.
        vendor_order_number (Union[Unset, str]): The vendor order number is a unique identifier generated by a vendor
            for their reference.
        estimated_delivery_date (Union[Unset, datetime.datetime]): Date on which the shipment is expected to reach the
            buyer's warehouse. It needs to be an estimate based on the average transit time between the ship-from location
            and the destination. The exact appointment time will be provided by buyer and is potentially not known when
            creating the shipment confirmation.
    """

    shipped_date: datetime.datetime
    shipment_status: ShipmentDetailsShipmentStatus
    is_priority_shipment: Union[Unset, bool] = UNSET
    vendor_order_number: Union[Unset, str] = UNSET
    estimated_delivery_date: Union[Unset, datetime.datetime] = UNSET
    additional_properties: Dict[str, Any] = attr.ib(init=False, factory=dict)

    def to_dict(self) -> Dict[str, Any]:
        shipped_date = self.shipped_date.isoformat()

        shipment_status = self.shipment_status.value

        is_priority_shipment = self.is_priority_shipment
        vendor_order_number = self.vendor_order_number
        estimated_delivery_date: Union[Unset, str] = UNSET
        if not isinstance(self.estimated_delivery_date, Unset):
            estimated_delivery_date = self.estimated_delivery_date.isoformat()

        field_dict: Dict[str, Any] = {}
        field_dict.update(self.additional_properties)
        field_dict.update(
            {
                "shippedDate": shipped_date,
                "shipmentStatus": shipment_status,
            }
        )
        if is_priority_shipment is not UNSET:
            field_dict["isPriorityShipment"] = is_priority_shipment
        if vendor_order_number is not UNSET:
            field_dict["vendorOrderNumber"] = vendor_order_number
        if estimated_delivery_date is not UNSET:
            field_dict["estimatedDeliveryDate"] = estimated_delivery_date

        return field_dict

    @classmethod
    def from_dict(cls: Type[T], src_dict: Dict[str, Any]) -> T:
        d = src_dict.copy()
        shipped_date = isoparse(d.pop("shippedDate"))

        shipment_status = ShipmentDetailsShipmentStatus(d.pop("shipmentStatus"))

        is_priority_shipment = d.pop("isPriorityShipment", UNSET)

        vendor_order_number = d.pop("vendorOrderNumber", UNSET)

        _estimated_delivery_date = d.pop("estimatedDeliveryDate", UNSET)
        estimated_delivery_date: Union[Unset, datetime.datetime]
        if isinstance(_estimated_delivery_date, Unset):
            estimated_delivery_date = UNSET
        else:
            estimated_delivery_date = isoparse(_estimated_delivery_date)

        result = cls(
            shipped_date=shipped_date,
            shipment_status=shipment_status,
            is_priority_shipment=is_priority_shipment,
            vendor_order_number=vendor_order_number,
            estimated_delivery_date=estimated_delivery_date,
        )

        result.additional_properties = d
        return result

    @property
    def additional_keys(self) -> List[str]:
        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> Any:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties
